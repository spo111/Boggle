import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;

/*************************************************************************
 * Name: Zheng Kuang
 * Email: kuangzheng04@gmail.com
 *
 * Compilation:  javac BoggleSolver.java
 * Execution:    java BoggleSolver
 * Dependencies: TrieDict.java, BoggleBoard.java
 *
 * Description:  An immutable data type that finds all valid words in a 
 *               given Boggle board, using a given dictionary.
 * http://coursera.cs.princeton.edu/algs4/assignments/boggle.html
 *
 *************************************************************************/

public class BoggleSolver {
	private TrieDict dict;		// a dictionary implements trie
	
	// Initializes the data structure using the given array of strings as the dictionary.
	public BoggleSolver(String[] dictionary) {
		dict = new TrieDict();
		for (String s : dictionary) {
			dict.put(s);
		}
	}
	
	// Retruns the set of all valid words in the given Boggle board, as an Iterable.
	public Iterable<String> getAllValidWords(BoggleBoard board) {
		HashSet<String> wordList = new HashSet<String>();
		
		int m = board.rows();
		int n = board.cols();
		if (m == 0 || n == 0) return wordList;
		
		LinkedList<Integer>[] adj = (LinkedList<Integer>[]) new LinkedList[m * n];
		for (int k = 0; k < m * n; k++) {
			adj[k] = new LinkedList<Integer>();
		}
		buildAdj(adj, m ,n);
		
		for (int k = 0; k < m * n; k++){
			dict.searchBoard(board, adj, k, wordList);
		}
		return wordList;
	}
	
	private void buildAdj(LinkedList<Integer>[] adj, int m, int n) {
		for (int i = 0; i < m - 1; i++){
			for (int j = 0; j < n - 1; j++){
				// link site (i, j) with (i, j + 1)
				adj[i * n + j].addFirst(i * n + j + 1);
				adj[i * n + j + 1].addFirst(i * n + j);
				
				// link site (i, j) with (i + 1, j)
				adj[i * n + j].addFirst((i + 1) * n + j);
				adj[(i + 1) * n + j].addFirst(i * n + j);
				
				// link site (i, j) with (i + 1, j + 1)
				adj[i * n + j].addFirst((i + 1) * n + j +1);
				adj[(i + 1) * n + j + 1].addFirst(i * n + j);
				
				// link site (i, j + 1) with (i + 1, j)
				adj[i * n + j + 1].addFirst((i + 1) * n + j);
				adj[(i + 1) * n + j].addFirst(i * n + j + 1);
			}
			// link site (i, j) with (i + 1, j) when j = n - 1
			adj[i * n + n - 1].addFirst((i + 1) * n + n - 1);
			adj[(i + 1) * n + n -1].addFirst(i * n + n - 1);
		}
		// link site (i ,j) with (i, j + 1) when i = m - 1
		for (int j = 0; j < n - 1; j++) {
			adj[(m - 1) * n + j].addFirst((m - 1) * n + j + 1);
			adj[(m - 1) * n + j + 1].addFirst((m - 1) * n + j);
		}
	}
	
	// Returns the score of the given word if it is in the dictionary, 0 othewise.
	public int scoreOf(String word){
		if (!dict.contains(word)) return 0;
		int l = word.length();
		if (l < 3) return 0;
		if (l < 5) return 1;
		if (l == 5) return 2;
		if (l == 6) return 3;
		if (l == 7) return 5;
		return 11;
	}
	
	// The first argument takes the name of the dictionary file and the second argument takes the name of the board file.
	public static void main(String[] args) {
		  Scanner sc = null;
		  try {
		   sc = new Scanner(new File(args[0]));
		  } catch (FileNotFoundException e) {
		   e.printStackTrace();
		  }
		  String inputAll = sc.useDelimiter("\\A").next();
		  String[] inputSplit = inputAll.split("\\p{javaWhitespace}+");

		  BoggleSolver solver = new BoggleSolver(inputSplit);
		  BoggleBoard board = new BoggleBoard(args[1]);
		  solver.getAllValidWords(board);
		  
		  System.out.println(board);
		  int score = 0;
		  int len = 0;
		  for (String word : solver.getAllValidWords(board)){
			  System.out.println(word);
			  score += solver.scoreOf(word);
			  len++;
		  }
		  System.out.println("Score = " + score);
		  System.out.println(len);	  
	}
}
